#! /usr/bin/octave -q



cctd = getenv('CCTDIR')
addpath([cctd '/src/']);
addpath([cctd '/utils/']);
addpath([cctd '/utils/nifti/']);
set_config

usage_message = 'Usage: fdr <input file> [--mask <mask file>] [--vol or -v <volume number>] [-o <output file>]';
help_message = 'Use --help for help options.'

disp(usage_message);
disp(help_message);

disp('Creates a fdr corrected file with -log(q-values)(to the base 10).');
disp('<input file>\t: File containing -log(p-values) (to the base 10) for the voxels (negative values are permitted and signs are copied onto output q-values). ');
disp('--mask\t: Mask file. If no mask or threshold is specified then the code uses standard 2mm brain mask from FSL directory. In case mast file is specified, voxels with non-zero values in the mask file are used for testing. In case the <input file> contains multiple volumes, all the volumes are assumed to be p-values and are converted to q-values if --vol option is not given. If --vol option is used then only the specified <volume number> is converted from p-values to q-values, the rest of the volumes are copied to the output.');
disp('--vol\t: Volume to utility is under development.')

arg_list = argv ();

if length(arg_list)<2
  disp('Not Enough Input Arguments!');
  disp(usage_message);
  exit;
endif

input_file = arg_list{1};
mask_file = '';
volume_number = -1;
output_file = '';

mask_index = find(strcmp(arg_list,'--mask'));
if length(mask_index)~=0
  mask_file = arg_list{mask_index+1};
  disp('Using Mask File: ');
  disp(mask_file);
  
endif


volume_index = find(strcmp(arg_list,'--vol'));
if length(volume_index)~=0
  volume_number = arg_list{volume_index+1};
  disp('Using Volume Number: ');
  disp(volume_number);
endif


volume_index = find(strcmp(arg_list,'-v'));
if length(volume_index)~=0
  volume_number = arg_list{volume_index+1};
  disp('Using Volume Number: ');
  disp(volume_number);
endif

output_index = find(strcmp(arg_list,'-o'));
if length(output_index)~=0
  output_file = arg_list{output_index+1}
  disp('Using Output File: ');
  disp(output_file);
endif

output_index = find(strcmp(arg_list,'-o'));
if length(output_index)~=0
  output_file = arg_list{output_index+1}
  disp('Using Output File: ');
  disp(output_file);
endif




fdr(input_file, '', mask_file, output_file);





